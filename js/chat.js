// Generated by CoffeeScript 1.8.0
(function() {
  var fgFromBg, hexToRgb, placeholderMessage, showMessages, update, __updateCounter;

  $(document).ready(function() {
    var chatContainer, inputContainer, logoutBtn, overlay, sendBtn, updateAllBtn;
    overlay = $(".overlay");
    chatContainer = $(".chatContainer");
    inputContainer = $(".inputContainer");
    sendBtn = $(".btn.send");
    sendBtn.click(function() {
      var content, textarea;
      textarea = $("#message");
      content = textarea.val();
      if (content.length === 0) {
        textarea[0].focus();
        return true;
      }
      $.post("php/api.php?r=save", {
        n: $("#name").val(),
        m: content
      }, function() {
        $(".message").val("");
        clearTimeout(nextTimeout);
        update();
        return this;
      });
      textarea[0].focus();
      return true;
    });
    updateAllBtn = $(".btn.updateAll");
    updateAllBtn.click(function() {
      overlay.fadeIn(100);
      $.post("php/api.php?r=update_all", function() {
        clearTimeout(nextTimeout);
        chatContainer.empty();
        window.latestTimestamp = null;
        update("update_all");
        overlay.delay(600).fadeOut(100);
        return this;
      });
      return true;
    });
    logoutBtn = $(".btn.logout");
    logoutBtn.click(function() {
      $.post("php/api.php?r=logout", function() {
        clearTimeout(nextTimeout);
        open("index.php", "_self");
        return this;
      });
      return true;
    });
    chatContainer.css("height", window.innerHeight - inputContainer.outerHeight() - 40);
    window.latestTimestamp = null;
    update();
    $(window).resize(function() {
      chatContainer.css("height", window.innerHeight - inputContainer.outerHeight() - 40);
      return true;
    });
    return true;
  });

  hexToRgb = function(hex) {
    var result, shorthandRegex;
    shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    };
  };

  fgFromBg = function(hex) {
    var lightness, rgb;
    rgb = hexToRgb(hex);
    lightness = Math.round(((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000);
    if (lightness > 125) {
      return "black";
    }
    return "white";
  };

  showMessages = function(messages) {
    var alignment, bg, container, date, idx, message, newMessage, textColor, updated, word, words, _i, _j, _len, _len1;
    container = $(".chatContainer");
    updated = $("<div class=\"updated\" />");
    for (_i = 0, _len = messages.length; _i < _len; _i++) {
      message = messages[_i];
      alignment = message.name === $("#name").val() ? "right" : "left";
      date = moment(message.timestamp, "X");
      if (!date.isBefore(new Date(), "day")) {
        bg = "#" + string_to_color(message.name);
      } else {
        bg = "#cccccc";
      }
      textColor = fgFromBg(bg);
      words = message.message.split(" ");
      newMessage = [];
      for (idx = _j = 0, _len1 = words.length; _j < _len1; idx = ++_j) {
        word = words[idx];
        if (word.slice(0, 5) === "https") {
          newMessage.push("<a style='color: " + textColor + ";' href='" + word + "' target='_blank'>" + (word.slice(8)) + "</a>");
        } else if (word.slice(0, 4) === "http") {
          newMessage.push("<a style='color: " + textColor + ";' href='" + word + "' target='_blank'>" + (word.slice(7)) + "</a>");
        } else {
          newMessage.push(word);
        }
      }
      newMessage = newMessage.join(" ");
      updated.append("<div class=\"message " + alignment + "\" style=\"background-color: " + bg + "; color: " + textColor + ";\">\n    <div class=\"name\">" + message.name + "</div>\n    <div class=\"time\">" + (date.format("HH:mm")) + "</div>\n    <div class=\"content\">" + newMessage + "</div>\n</div>\n<div class=\"clear\" />");
    }
    container.append(updated);
    updated.find(".content").emoticonize();
    updated.slideDown(500, function() {
      var div;
      div = container[0];
      div.scrollTop = div.scrollHeight;
      return true;
    });
    return this;
  };

  __updateCounter = -1;

  placeholderMessage = true;

  update = function(action) {
    if (action == null) {
      action = "update";
    }
    $.post("php/api.php?r=" + action, {
      ts: latestTimestamp
    }, function(response) {
      var place;
      response = JSON.parse(response);
      if (response.length === 0) {
        if (typeof latestTimestamp === "undefined" || latestTimestamp === null) {
          showMessages([
            {
              name: "System",
              message: "...heute noch keine Nachrichten...",
              timestamp: -1
            }
          ]);
          $(".name:contains('System')").parent().css("margin-left", 200);
          window.latestTimestamp = -1;
          return true;
        }
        return false;
      }
      if (placeholderMessage) {
        $(".name:contains('System')").parent().remove();
        place = false;
      }
      response = response.sort(function(a, b) {
        if (a.timestamp < b.timestamp) {
          return -1;
        }
        if (a.timestamp > b.timestamp) {
          return 1;
        }
        return 0;
      });
      window.latestTimestamp = response[response.length - 1].timestamp;
      showMessages(response);
      return true;
    });
    if (++__updateCounter % 3 === 0) {
      $.post("php/api.php?r=users", function(response) {
        var bg, user, users, usersDiv, _i, _len;
        users = JSON.parse(response);
        usersDiv = $(".inputContainer .users");
        usersDiv.empty().html("Angemeldete Nutzer: ");
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          bg = "#" + string_to_color(user);
          usersDiv.append("<span style='background-color: " + bg + "; color: " + (fgFromBg(bg)) + ";'>" + user + "</span>");
        }
        return true;
      });
    }
    window.nextTimeout = setTimeout(update, 10000);
    return this;
  };

}).call(this);
